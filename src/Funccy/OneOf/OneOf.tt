<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var range = Enumerable.Range(2, 4);
var suffixes = new[]{ "", "A", "B", "C", "D", "E" };

string TypeArgs(int num, string extra = ""){
	var all = Enumerable.Range(1, num)
		.Select(x => $"T{suffixes[x]}{extra}")
		;

	return string.Join(", ", all);
}

string PrivateMembers(int num){
	var all = Enumerable.Range(1, num)
		.Select(x => suffixes[x])
		.Select(x => $"{Indent(2)}private readonly T{x} _{x};")
		;

	return string.Join(Environment.NewLine, all);
}

string Constructors(int num){
	var all = Enumerable.Range(1, num)
		.Select(x => suffixes[x])
		.SelectMany(x => new[]{
			$"{Indent(2)}public OneOf(T{x} value{x}){{",
			$"{Indent(3)}_tag = '{x}';",
			$"{Indent(3)}_{x} = value{x};",
			$"{Indent(2)}}}",
			$""
		})
		;

	return string.Join(Environment.NewLine, all);
}

string Indent(int levels){
	var spaces = levels * 4;
	var str = "".PadLeft(spaces, ' ');
	return str;
}

string MapFuncs(int num){
	var all = Enumerable.Range(1, num)
		.Select(x => suffixes[x])
		.Select(x => $"{Indent(3)}Func<T{x}, T{x}Next> f{x}");

	return string.Join($",{Environment.NewLine}", all);
}

string MapCases(int num){
	var all = Enumerable.Range(1, num)
		.Select(x => suffixes[x])
		.Select(x => $"                case '{x}': return new OneOf<{TypeArgs(num, "Next")}>(f{x}(_{x}));");

	return string.Join(Environment.NewLine, all);
}

string ExtractFuncs(int num){
	var all = Enumerable.Range(1, num)
		.Select(x => suffixes[x])
		.Select(x => $"{Indent(3)}Func<T{x}, TResult> f{x}");

	return string.Join($",{Environment.NewLine}", all);
}

string ExtractCases(int num){
	var all = Enumerable.Range(1, num)
		.Select(x => suffixes[x])
		.Select(x => $"                case '{x}': return f{x}(_{x});");

	return string.Join(Environment.NewLine, all);
}

string EqualityYields(int num){
	var all = Enumerable.Range(1, num)
		.Select(x => suffixes[x])
		.Select(x => $"{Indent(3)}yield return _{x};");

	return string.Join(Environment.NewLine, all);
}
#>
/* This is a generated file. */

using System;
using System.Collections.Generic;

namespace Funccy
{
<# foreach (var i in range) { #>

	/// <summary>
    /// A value that could be one of several types.
    /// </summary>
	public class OneOf<<#= TypeArgs(i) #>> : ValueObject<OneOf<<#= TypeArgs(i) #>>>
	{
		private readonly char _tag;
<#= PrivateMembers(i) #>

<#= Constructors(i) #>
		public OneOf<<#= TypeArgs(i, "Next") #>> Map<<#= TypeArgs(i, "Next") #>>(
<#= MapFuncs(i) #>
		){
			switch(_tag){
<#= MapCases(i) #>
				default: throw new InvalidOperationException();
			}
		}

		public TResult Extract<TResult>(
<#= ExtractFuncs(i) #>		
		){
			switch(_tag){
<#= ExtractCases(i) #>
				default: throw new InvalidOperationException();
			}
		}

		protected override IEnumerable<object> GetEqualityComponents(){
			yield return _tag;
<#= EqualityYields(i) #>
		}
	}

<# } #>
}
